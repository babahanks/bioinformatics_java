package com.michni.bioinformatics;



import java.io.*;
import java.util.*;
import java.util.stream.Collectors;


public class Algorithms {


    public static Map<String, List<List<Integer>>> KmersByTheClumps(
        char[] array,
        int k_kmerSize,
        int L_windowSize,
        int t_requiredFrequency)
    {
        Map<String, Kmer> map = getKmers_N(array, k_kmerSize);

        Map<String, List<List<Integer>>> clumpsMap = new HashMap<>();
        for (Kmer kmer : map.values()) {
            List<List<Integer>> listOfClumps = findClumps(kmer.indexes, k_kmerSize, L_windowSize, t_requiredFrequency);
            if (listOfClumps.size() > 0) {
                clumpsMap.put(kmer.kmerString, listOfClumps );
            }
        }
        return clumpsMap;
    }



    public static List<List<Integer>> findClumps(List<Integer> list,
                                                 int k_kmerSize,
                                                 int L_windowSize,
                                                 int t_requiredFrequency)
    {
        List<List<Integer>> clumps = new LinkedList<>();

        for (int i=0; i<list.size(); i++) {
            List<Integer> kmerInCLump = new LinkedList<>();
            int windowStart = list.get(i);
            int windowEnding = windowStart + L_windowSize - k_kmerSize;

            kmerInCLump.add(list.get(i));
            int j=i+1;
            while ( j<list.size() && list.get(j) <= windowEnding){
                kmerInCLump.add(list.get(j));
                j++;
            }

            if (kmerInCLump.size() >= t_requiredFrequency) {
               clumps.add(kmerInCLump);
            }
        }

        return clumps;
    }


    public static Set<String> stupidClumpMethod(
        char[] textArray,
        int k_kmerSize,
        int L_windowSize,
        int t_requiredFrequency)
    {
        Set<String> kmers = new HashSet<>();
        int arrayLength = textArray.length;
        for (int i=0; i<=arrayLength -L_windowSize; i++){
            Map<String, Kmer> map = getKmers_N(textArray, i, i+L_windowSize -1 , k_kmerSize);
            for (Kmer kmer: map.values()) {
                if (kmer.indexes.size() >= t_requiredFrequency) {
                    kmers.add(kmer.kmerString);
                }
            }
        }
        return kmers;
    }


    public static Map<String, Kmer> getKmers_N(
        char[] textArray,
        int startIndex,
        int endIndex,
        int kmerSize)
    {
        Map<String, Kmer> map = new HashMap<>();

        char[] kmerArray = new char[kmerSize];
        for (int i=startIndex; i <= endIndex - kmerSize; i++) {
            for (int j=0; j<kmerSize; j++) {
                kmerArray[j] = textArray[i+j];
            }
            String kmerString = new String(kmerArray);
            Kmer kmer = map.get(kmerString);
            if (kmer == null) {
                List<Integer> indexes = new LinkedList<>();
                indexes.add(i);
                kmer = new Kmer(kmerString, indexes);
                map.put(kmerString, kmer);
            }
            else {
                kmer.addIndex(i);
            }
        }

        return map;
    }

    public static Map<String, Kmer> getKmers_N(char[] textArray, int kmerSize) {
        Map<String, Kmer> map = new HashMap<>();


        for (int i=0; i <= textArray.length - kmerSize; i++) {
            char[] kmerArray = new char[kmerSize];
            for (int j=0; j<kmerSize; j++) {
                kmerArray[j] = textArray[i+j];
            }
            String kmerString = new String(kmerArray);
            Kmer kmer = map.get(kmerString);
            if (kmer == null) {
                List<Integer> indexes = new LinkedList<>();
                indexes.add(i);
                kmer = new Kmer(kmerString, indexes);
                map.put(kmerString, kmer);
            }
            else {
                kmer.addIndex(i);
            }
        }

        return map;
    }

    /**
     * Big(0) = (textArray.length - patternArray.length + 1) * patternArray.length
     * @param textArray
     * @param patternArray
     * @param startIndex
     * @return
     */
    public static List<Integer> patternIndexes(char[] textArray, char[] patternArray, Integer startIndex) {
        List<Integer> indexes = new LinkedList<>();
        if (startIndex == null) startIndex = 0;

        for (int i=startIndex; i< textArray.length - patternArray.length + 1; i++){
            boolean matched = true;
            for(int j=0; j<patternArray.length; j++){
                if (textArray[i+j] != patternArray[j]){
                    matched=false;
                    break;
                }
            }
            if (matched) {
                indexes.add(i);
            }
        }

        return indexes;
    }



    public static List sort(Map<String, Kmer> map) {
        Collection<Kmer> kmers = map.values();
        List<Kmer> list = kmers.stream().collect(Collectors.toList());
        list.sort(Comparator.reverseOrder());
        return list;
    }

    public static List<Kmer> getMostFrequent(List<Kmer> kmers){
        List<Kmer> newList = new LinkedList<>();

        int i=0;
        newList.add(kmers.get(i));
        int count = kmers.get(i).indexes.size();
        while (kmers.get(++i).indexes.size() == count) {
            newList.add(kmers.get(i));
        }
        return newList;
    }

    public static List<Kmer> getByNumberOfTimePresence(Map<String, Kmer> map, int numberOfTimes){
        List<Kmer> newList = new LinkedList<>();
        Collection<Kmer> kmers = map.values();
        for (Kmer kmer: kmers){
            if (kmer.indexes.size() >=numberOfTimes) {
                newList.add(kmer);
            }
        }
        return newList;
    }

    public static void printKmers(List<Kmer> kmers){
        for (Kmer kmer: kmers){
            System.out.println(kmer.kmerString);
        }
    }

    public static List<Set<Kmer>> getReverseComplements(List<Kmer> kmers) {
        Map<String, Kmer> map = kmers.stream().collect(Collectors.toMap(kmer->kmer.kmerString,  kmer -> kmer));
        List<Set<Kmer>> reverseComplements = new LinkedList<>();
        Set<String> processed = new HashSet<>();
        for (String kmerString: map.keySet()) {
            if (processed.contains(kmerString)) {
                continue;
            }
            String reversecomplement = new String(complement(reverse(kmerString.toCharArray())));
            if (map.get(reversecomplement) != null) {
                Set<Kmer> complementaries = new HashSet<>(2);
                complementaries.add(map.get(kmerString));
                complementaries.add(map.get(reversecomplement));
                reverseComplements.add(complementaries);
                processed.add(kmerString);
                processed.add(reversecomplement);
            }
        }
        return reverseComplements;
    }

    public static List<Set<String>> findReverseComplements(Set<String> kmers){
        List<Set<String>> reversePairs = new LinkedList<>();
        Map<String, String> potentials = new HashMap<>();

        for (String kmer: kmers) {
            String rc = potentials.get(kmer);
            if (rc != null) {
                Set<String> set = new HashSet<>();
                set.add(rc);
                set.add(kmer);
                reversePairs.add(set);
            }
            else {
                char[] rcChars = complement(kmer.toCharArray());
                rcChars = reverse(rcChars);
                potentials.put(new String(rcChars), kmer);
            }
        }

        return reversePairs;
    }

    public static List<Set<String>> findReverseComplements2(Set<String> kmers){
        List<Set<String>> reversePairs = new LinkedList<>();
        Set<String> reverseComplements = new HashSet<>();

        for (String kmer: kmers) {
            char[] rcChars = complement(kmer.toCharArray());
            rcChars = reverse(rcChars);
            reverseComplements.add(new String(rcChars));
        }

        for (String kmer: kmers) {
            char[] rcChars = complement(kmer.toCharArray());
            String rc = new String(reverse(rcChars));
            if (reverseComplements.contains(rc)){
                Set<String> set = new HashSet<>();
                set.add(rc);
                set.add(kmer);
                reversePairs.add(set);
            }
        }

        return reversePairs;
    }




    public static boolean areReverseComplement(char[] first, char[] second) {
        if (first.length != second.length) {
            return false;
        }

        int j = first.length -1;
        for (int i=0; i<first.length; i++){
            if (!isComplement(first[i], second[j-i])){
                return false;
            }
        }
        return true;
    }



    public static boolean isComplement(char first, char second){
        first = Character.toUpperCase(first);
        second = Character.toUpperCase(second);
        if (first == 'A') {
            return (second == 'T') ? true : false ;
        }else if (first == 'T') {
            return (second == 'A') ? true : false;
        }else if (first == 'C') {
            return (second == 'G') ? true : false ;
        }else if (first == 'G') {
            return (second == 'C') ? true : false ;
        }

        throw new IllegalArgumentException("first char is not valid");
    }

    public static char[] getReverseComplement(char[] input){
        char[] reverse = reverse(input);
        char[] ReverseComplement = complement(reverse);
        return ReverseComplement;
    }


    public static char[] reverse(char[] input) {
        char[] reverse = new char[input.length];
        int length = input.length;

        int j= length-1;
        for (int i=0; i<input.length; i++) {
            reverse[j-i] = input[i];
        }

        return reverse;
    }

    public static char[] complement(char[] input) {
        char[] complement = new char[input.length];
        for (int i=0; i< input.length; i++) {
            char c = Character.toUpperCase(input[i]);
            if (c == 'A') {
                complement[i] = 'T';
            }else if (c == 'T') {
                complement[i] = 'A';
            }else if (c == 'C') {
                complement[i] = 'G';
            }else if (c == 'G') {
                complement[i] = 'C';
            }
            else {
                throw new IllegalArgumentException(String.format("char %c at index %o is not valid", c, i));
            }
        }
        return complement;
    }

    public static char[] getChars(String fileName) throws IOException {

        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String text = br.readLine();
            return text.toCharArray();
        } catch (IOException e) {
            throw e;
        }
    }


    public static void main(String args[]) throws IOException {
//        int count = patternCount("abdef", "de");
//        count = patternCount("abdefde", "de");
//        count = patternCount("abdeded", "ded");
//        count = patternCount("abdededfded", "ded");
//        count = patternCount("GCGCG", "GCG");

//        Map<String, Kmer> map = getKmers_N("abdefde".toCharArray(), 2);
//
//        String text = "AGCCGGGATCTAGGGATCTGGGATCTGAAGGGATCTGGGGATCTAGTGGGATCTGGGATCTACGAAGGGGATCTGGGGATCTGGGATCTGGGGATCTGGGATCTTGGGATCTCTGGGATCTAATTGGGATCTTCGGAGGGGATCTGGGATCTGGGATCTCCTGGGGATCTGGGATCTGAGTCAGGGATCTGGGATCTGGGGGATCTGTGGGATCTGTCTCAGGGATCTGGGGATCTTCTCGGGATCTACGGGATCTTGGGATCTAGGGATCTGAATATTTGGGATCTTGGGATCTCCAGGGATCTCTGGGATCTGGGGATCTTACCGGGATCTGTGCATAAGGGGATCTGAAGGGATCTAGGGATCTCCAGGGATCTGGGATCTCAGGGATCTTGGGATCTAGGGATCTTGGGATCTATTAGGGATCTCTTAGGGATCTTGGGATCTTGCCCCCGGGATCTGAGACGGGATCTCGGGATCTGGGATCTTGGGATCTGGGATCTAGGGATCTGTATTGGGATCTAAAGGGATCTGGGATCTATGGGATCTCCTTCAGTATGGGGATCTTGTGGGATCTGCTGTAGAGGTCGGGATCTGGGATCTCGGGATCTGGGATCTCGGGGATCTAGGGATCTAAGTAGGGATCTTTGGGGATCTCATTAGGGATCTTGGGATCTGGGATCTGGGATCTTGCGGGGATCTGGGATCTCGGGGATCTTCTCCAAAGGGATCTAGGGATCTAACAGGGATCTCCACGGGATCTCGGGATCTCAGCAACTGGGATCTGAAGGGATCTGGGGATCTCCATGGGATCTGGGATCTTGGGATCTTGACATAGGGATCTCGGGATCTGGGGATCTGTGGGATCTGAGGGATCTGGGGATCTAAGGCGTCTGGGATCTTGGGATCTAATGCCGTGGGGATCTAATGCGGGATCT";
//        String pattern = "GGGATCTGG";
//        int index = text.indexOf(pattern);
//        List list  = patternIndexes(text.toCharArray(), pattern.toCharArray(), null);
//        Map<String, Kmer> map2 = getKmers_N(text.toCharArray(), 9);
//        List sorted = sort(map2);
//


//        String text_02 = "CCTGCGGTCTGCGGTCCTGCGGTGACATTCTGGGCTGCGGTCCCTGCGGTCTGCGGTGGTCTGCGGTCCCTCCTGCGGTGCAACTGCGGTGTCTGCGGTAGTGGGCACTGCAGGCCCCTGCGGTTCGCTTCTGCGGTTCTGCGGTCCCCTGCGGTGCTGCGGTCTGCGGTCTGCGGTAGCTGCGGTTTCTGCGGTCCTGCGGTCTGCGGTCTGCGGTGTTAACGACGACCCAAGCTGCGGTCTGCGGTTGCAATCTCTGCGGTGCCGCTGCGGTCTGCGGTCTGCGGTCCGCGCTGCGGTTATCCTCTGCGGTTTGCTGCGGTAACTGCGGTCTGCGGTGCTGCGGTCTGCGGTCTGCGGTAGTCTGCGGTCTGCGGTCAGCTGCGGTTTCTGCGGTGCTGCGGTATATATGGACCTGCGGTTCTGCGGTCTGCGGTCTGCGGTCCTGCGGTATCTGCGGTCCTGCGGTGCTGCGGTACTGCGGTTTCTGCGGTGCTGCGGTTTGCCTTACTGCGGTTTCTGCGGTTCTGCGGTGGTGTATCGCTGCGGTCTGCGGTCTGCGGTCTGCGGTTCTGCGGTTTCTGCGGTAACTGCGGTGCTGCGGTTGGCTCTGCGGTGGCTGCGGTTACCTGCGGTATGTCTGCGGTTCTGCGGTAACCTGCGGTACTGCGGTATAACACCTGCGGTTCTGCGGTACTGCGGTGTAGCGACACCGTGTTAACTGCGGTAGTCTGCGGTCTGCGGTCTGCGGTGTCTGCGGTTACTGCGGTCTACCTGCGGTATGCACTGCGGTAGCTGCGGTCTGCGGTAAGCATACTGCGGTTTCTATCTGCGGTCAAGGCTGCGGTTCTGCGGTTGTCTGCGGTCTGCGGTGACTGCCTGCGGTCACTGCGGTTGCTGCGGTCTGCGGTTTACTGCGGTGCTGCGGTCTGCGGTCGTTTCTGCGGTATCAGCTGCGGTCTGCGGTAGGCTGCGGTGCTGCGGTCTGCGGTCTGCGGTCTCTGCGGTTCTGCGGTCTGCGGTGCGCTGCGGTCTGCGGTGCTGCGGTCTCCTGCGGTTCTGCGGTCTGCGGTCTGCGGTTCGCGAGCTTTGCTGCGGTACTCTGTGCACTGCGGTCACAAGCTGCGGTTCTGCGGTAGCAGGCAGACTGCGGTGCCGGCTGCGGTCCTGCGGTAACTGCGGTGTTACTGCGGTCTGCGGTACTGCGGTTACACCACGACTGCGGTACTCTGCGGTTCGGCTGCGGTCCTGCGGTCTGCGGTGTAGTAATGCTCTGCGGTCTTATCTGCGGTCTGCGGTAGCGCTGCGGTAGCTTTGTCTGCGGTTCCTGCGGTATATCCTGCGGTCTGCGGTACTGCGGTCTGCGGTCTGCGGTCGATCTGCGGTTACTGCGGTCACTGCGGTCTGCGGTCACTGCGGTCACTCACTGCGGTCTGCGGTCTGCGGTGCCTGCGGTTGCTGCGGTCTGCGGTCCCTGCGGTTTCCTGCGGTCACTGCGGTGTACTGCGGTGGGCCTCTGCGGTACTGCGGTGCTGCGGTGCTGCGGTCTTAGTAATACTGCGGTCTGCGGTACTGCGGTCCTGCGGTCCACTGCGGTGGAAACGTCCCTGCGGTCTGCGGTTAATCTGCGGTAAGCCTGCGGTTCTGCGGTCTGCGGTGATGCTGCGGTCGCTGCGGTACTGCGGTTTCTCTGCGGTCGATATCTGCGGTCTGCGGTGACTGCGGTCTGCGGTACTGCGGTCTGCGGTCGGACCGAGACTCTGCGGTTCTGCGGTACGGACTGCGGTGGCTGCGGTTATTCTGCGGTCCTGCGGTCTGCGGTGTCTGCGGTCTGCGGTGAACTGCGGTACCCTGCGGTTTCTGCGGTTCTCTGCGGTCTGCGGTTAACTGCGGTGCTGCGGTTCCTGCGGTCTGCGGTACTGCGGTCTGCGGTAACTGCGGTGCTGCGGTACTGCGGTGCTGCGGTCTGCGGTACTGCGGTCTGCGGTTAGGTACTGCGGTCTGCGGTGCGCTGCGGTCACGGGTGCTGCGGTGTCTGCGGTTCCCTGCGGTTCTGCGGTACGGCTGCGGTCTGCGGTCTGCGGTTCTGCGGTCACTTTAGACTGCGGTTACTGCGGTTCTGCGGTAGCTGCGGTGATTCTGCGGTTGGCTAAGCTGCGGTTGCCTGCGGTGACGATCGACTGAGACGCTGCGGTCTGCGGTTCCTGCGGTCTGCGGTCTGCGGTGCCTGCGGTTGGAAATCTGCGGTCCTGCGGTCTGCGGTATCTGCGGTGGGCTGCGGTAGGGTGAAGTCTTAAGCTGCGGTAGGGCTGCGGTCTAGCACTGCGGTTCTGCGGTCTGCGGTTCCCTGCGGTTCTGCGGTCATTCTTGCACTTTTACAATCTGCGGTCTGGCTGCGGTCTGCGGTAACGCTGCGGTCATTCCTGCGGTGATCCTTCTGCGGTCTGCGGTCTGCGGTTGCTGCGGTCGCTGCGGTGCTGCGGTCTACCGCTGCCTGCGGTGAACTGCGGTACTGCGGTTCTGCGGTGCGGGGTACCTGCGGTCTGCGGTTCTGCGGTGTGAGTTAGAACTGCGGTGCCGTACTCCTGCGGTAGCTCCACTGCGGTCGGGAACTGCGGTAGACCTCTGCGGTACCTGCGGTCTGACGACTGCGGTGTTCAAGCTGCGGTCCCTGCGGTGTACAAGTATCTGCGGTCTGCGGTCTGCGGTTGCTGCGGTCTGCGGTGTCCTGCGGTCTGCGGTTCCTGCGGTACCTTCTGCGGTTCTGCGGTCTGCGGTGATCTGCGGTGCTGCGGTCCTACTGCGGTACTGCGGTTAAACCGCCTGCGGTCTGCGGTTTCTCCTGCGGTCGAGTTCGAAACGATCTGACTGCGGTAGCTGCGGTTTCACACCTGCGGTTCCGCTGCGGTCTGCGGTACTGCGGTATGTACTGCGGTGCTGCGGTCCTGCGGTCTGCGGTCTGCGGTCTCTGCGGTACTGCGGTCACTGCGGTACTGCGGTCCTGCGGTGGCTGCGGTCTGCGGTTCACTGCGGTGGATTCTGCGGTTCTGCGGTCTGCGGTGGGCTATCGCCTGCGGTCTGCGGTCTGCGGTCCCCTGCGGTCTGCGGTCCTGCGGTGGTCAATGGCCCTGCGGTACCTTTCTGCGGTTGTCTGCGGTCTGCGGTTCTGCGGTCAGAACTGCGGTCTGCGGTAGGACGTCCCTGCGGTACAACTGCGGTCCAACCTGCGGTCCTGCGGTCTGCGGTACTGCGGTCTGCGGTCTGCGGTCTACTGCGGTGAGCTGCGGTGCTGCGGTCCTGCGGTCGGCCGGCTGCGGTATACTCTCACTGCGGTTCTGCGGTCTGCGGTTCCTGCGGTCTGCGGTACTCTGCGGTACTGCGGTTCTGCGGTTCCTTATACTGCGGTTGGCGTTGCTGCGGTCCCTCCTGCGGTCTGCGGTGTCCTCTGCGGTGGGCTCTGCGGTCTGCGGTCTGCGGTACCTGCGGTGTGGTTGTTTCATCTGCGGTTTTTCCTGCGGTCTGCGGTCTGCGGTCTGCGGTAACTGCGGTGGCCTGCGGTCTGCGGTCTGCGGTGGCCTGCGGTGGCCTACCTGCGGTGCTGCGGTATGCTGCGGTACTGCGGTAACTGCGGTGCTGCGGTACTGCGGTCTGCGGTGCGAATTCCGTTCACTGCGGTTAACCTGCGGTTCTGCGGTTCTTGGCTGCGGTAAATCCACTGCGGTCTGCGGTCTGCGGTATGGTCCTCCTGCGGTCTGCGGTCGCTGCGGTCCATCTGCGGTGGCCTGCGGTTACTGCGGTTTGCTGCGGTAATAAACTAAAATAGACTGCGGTTACTGCGGTCTGCGGTACTGCGGTAGCGCTGCGGTGCCTGCGGTCTGCGGTCTGCGGTTAGACTGCGGTCTGCGGTCTGCGGTCTCTGCGGTCAGGTCTGCGGTTCGTGCTGCGGTGCTGCGGTGTACTGCGGTCACTGCGGTCTGCGGTCGTCTGCGGTTAGCTTTAAACTGCGGTCTAGTCTGCGGTCTGCGGTTCGCTGGAGTGAAGGACCTGCGGTCCTGCGGTTCTGCGGTGACTGCGGTTACTGCGGTAGCTCTGCGGTTGTGTATGCACTGCGGTATGAACCCTGCGGTTCACCTGCGGTGTGCTGCGGTCTGCGGTCTGCGGTCAACGCTTGCAGCACTTGAGGCTGCGGTGCTGCGGTTCTGCGGTGCTGCGGTGCTGCGGTCTGCGGTCTGCGGTCGCTGCGGTCTGCGGTACTGCGGTCGCTGCGGTAATGCTGCGGTGTAACGATTTCTGCGGTCTGCGGTGAGCACTGCGGTCTGCGGTCTGCGGTTCTGCGGTCTGCGGTGCTGCGGTTAACAGCCTGCGGTAAGTCCTGCGGTGTCTGCGGTCTGCGGTGAAGTAGCTGCGGTCTGCGGTCGCTGCGGTCTGCGGTCTGCGGTACCTGCGGTCCCCACTGCGGTCTTGCTGCGGTCTGCGGTCGACTGCTGCGGTCCTGCGGTAATATACCTGCGGTCCCGCTGCGGTCTGCGGTCTGCGGTTCTGCGGTGCCTGCGGTGACACTGCGGTCTGCGGTAAACTCCTGCGGTACTGCGGTCTGCGGTGCTGCGGTCCTGCGGTTAACTGCGGTGTGAAAGCTCTGCGGTTCTGCGGTAGCCTGCGGTTCTGTATCTGCGGTACTGCGGTTCTGCGGTTCTGCGGTGACTGCGGTCTGCGGTGCTGCGGTATCTGCGGTCAAGTGACTGCGGTACTGCGGTTCCGTCTGCGGTCCTGCGGTCTGCGGTAGGAACTGCGGTTCTGCGGTAAGTCTGCGGTGGTACCCGCTGCGGTAGCTTCAATACGAATAAACTGCGGTTTAAGCCTGCGGTCTGCGGTACACTGCGGTCTGCGGTCACAGCCCTGCGGTTGCTGCGGTGACTGCGGTCATAATCTGCGGTCTGCGGTCAAACTGCGGTCTGCGGTGACTGCGGTCTGCGGTACTGCGGTTGACTGCGGTCTGCGGTTGAACCTGCGGTTCCTGCGGTTCCGTGTCTGCGGTTTCGCTGCGGTGCCTTTGCCTGCGGTTAGCTGCGGTATCTGCGGTGAGCTGCGGTTCTGCGGTCTGCGGTCCTGCGGTTCTGCGGTCATATTCTGCGGTCTGCGGTCGGCGGCTGCGGTACTGCGGTCGCTGCGGTGACTGCGGTCCTGCGGTTTATCTGCGGTCTGCGGTAGCAAAGAAGTTTCTGCGGTCATTGAGCTGCGGTCTGCGGTGCCTGCGGTAGGCGGGCTGCGGTTACTGCGGTCTGCGGTCTGCGGTGCTGCGGTTGAGCCAGGCTGCGGTCTGCGGTAACTGCGGTCTGCGGTAACTGCGGTATCCTGCGGTATACCTAGCTGCGGTCTGCGGTTATCTGCGGTCTCTGCGGTACTGCGGTCACTGCGGTCACTGCGGTCTGCGGTAACTTCTGCGGTCTGCGGTAGACTGCGGTGTCTGCGGTCTGCGGTAAGACCTGCGGTCTGCGGTCTGCGGTCGGCTGCGGTTATGTAACTGCGGTTAGCTGCGGTGCTGCGGTTGCTGCGGTGAGCTGCGGTCTGCGGTTATATCTGCGGTCTGCGGTGCGTTTTCTGCGGTCTGCGGTGACCTGCGGTCCTGCGGTGCTGCGGTGTCACTGCGGTAGCTGCTGCGGTTGTCTGCGGTGCTGCGGTGCTGCGGTCTGCGGTCTGCGGTGCTGCGGTACTGCGGTACTGCGGTCTGCGGTCTGCGGTCTCTCCTGCGGTCTGCGGTCAACCTGCGGTTCTGCGGTGCTCTGCGGTCTGCGGTATCTGCGGTCTGCGGTAAACCTTTTAGCTGCGGTCCTGCGGTCTGCGGTACTGCGGTTAGGTCTGCGGTTATGACTGCGGTCTGCGGTTCTGCGGTCTGCGGTCAAGCCTACTAGCTTACCCCTGCGGTCTGCGGTCTGCGGTACTGCGGTTCCTGCGGTGCGACTGCGGTCGCTGCGGTATGGTCACTGCGGTCTGCGGTATCTCTGCGGTGTCTGCGGTCGGCTGCGGTTAGCTGCGGTCACTGCGGTATCTGCGGTCTGCGGTGGCTGCGGTGGTTAACTGCGGTTTTCATTCTGCGGTCTGCGGTCTGCGGTACTGCGGTAGGAACTGCGGTTCTGCGGTCACTACTGCGGTCCTGCGGTACTTCTGCGGTCATGCTGCGGTGTGACGATTTGTTTCTGCGGTCTGCGGTCCTGCGGTCTGCGGTCTGCGGTATAGCCTGCGGTATTCTGCGGTACTGCGGTATGCTGCGGTGCTCTGCGGTGATCTGCGGTACTGCGGTCTGCGGTCCCGCTGCGGTACTGCGGTCTGCGGTCCCTTCGTCTCTCCCCTGCGGTCTGCGGTGGCGTCTGCGGTCCTGCGGTTCTGCGGTTCTGCGGTCTGCGGTTCGGCTGCGGTTCCTGCGGTAACTACTGCGGTCTGCGGTCTGCGGTCTGCGGTTCTGCGGTTCTGCGGTCTGCGGTTGACGGACTGCGGTGCTGCGGTCATAGCTGCGGTTCCCTGCGGTGTCTCTGCGGTTATCCTGCGGTAAATTCCCCTGCGGTTCTGCGGTGCTGCGGTACATAGCTGCGGTGTCCTGCGGTCTCTGCGGTTACCTGCGGTAACTGCGGTCTGCGGTTAAGACCTGCGGTGCTGCGGTCTGCGGTTCCTGCGGTCTGCGGTCTGCGGTATCTGACTCTGCGGTACTGCGGTTTCTGCGGTCCCAAGAGGAGCTGCGGTCTGCGGTATTCTGCGGTCTGCGGTAGTCGCCTGCGGTTAGCTGCGGTCTGCGGTAAGTACCTGCGGTGGCATATCTGCGGTTCTGCGGTTACCCTGCGGTTATCACCGGCCTGCGGTCTGCGGTCAGGCCTGCGGTCTGCGGTTCTGCGGTCCTGCGGTCAGTGCTGCGGTCGCTGCGGTCTCCACTGCGGTGCTGCGGTTTCGCAGCTGCGGTAAGCTGCGGTCGAGCTCTGCGGTCTGCGGTTCTGCGGTTCTGCGGTGTCGACTGCGGTACGTCTGCGGTCTGCGGTGGTGGGGCTGCGGTCTGCGGTTGTATTTAACTGCGGTGTAGCTGCGGTCCCTGCGGTATGCGGCTGCGGTGCACAGGTCACTGCGGTCCTCTGCGGTATGTGCTGCGGTCTGCGGTCTGCGGTATAGCTCCGCTGCGGTCACTGCGGTATCCTGCGGTGTCTGCGGTCTGCGGTGGCTGCGGTCTGCGGTTATCTGCGGTACTGCGGTCTCTGCGGTCTGCGGTCTGCGGTGACTGCAAACGTGCCGTCATTTTCTGCGGTCTGCGGTACTGCGGTGCTGCGGTCCCTGCGGTTCTGCGGTCTGCGGTCTGCGGTATGGTCCTCATCTCCTGCGGTTTACTGCGGTCTGCGGTCTGCGGTCCACATCATCAGTGAAAGGACCTGCTGCGGTCCCTGCGGTCTGCGGTCTGCGGTGCTGCGGTGGGCTGCGGTAGCCTGCGGTCTGCGGTCTATACTGCGGTTTTCGAGGCTGCGGTACTGCGGTTACGATTCTGCGGTAGCTGCGGTCTGCGGTGCCTGCGGTTCTGCGGTAAGGCTGACTGCGGTCTGCGGTCCACCACGGTCTGCGGTCTGCGGTGGATCTGCGGTACACCTGCGGTCTGCGGTTAGCTGCGGTTGCTTCTGCGGTGACTGCGGTCCTGCGGTCTAGTCAGTCTGCGGTCGAACTGCGGTAATTGTACAAGGCTGCGGTTGAACCCTGCAGACTCAGTTAGCCTTTCTCTGCGGTCCCTGCGGTAGCTGCGGTCCTGCGGTACCCTGCGGTCTCTGCGGTTCTGCGGTCTGCGGTAGCGCCTGCGGTGACTGCGGTTCACTGCGGTCTGCGGTGCTCTGCGGTCGTGTACCTGCGGTCTGCGGTACCTGCGGTAGTGAGCTGCGGTCTGCGGTATCCTGCGGTCGCTGCGGTCTGCGGTCTGCGGTGCTGCGGTCTGCGGTCCTGCGGTAAGCTGCGGTTATTCTGCGGTTAGCTGCGGTAACTGCGGTCTGCGGTTGGTCCATCTTCTGCGGTCCATGCCTTAACTGCGGTGCTGCGGTCTGCGGT";
//        String pattern = "CTGCGGTCT";
//
//        List<Integer> indexes = patternIndexes(text_02.toCharArray(), pattern.toCharArray(), 0);
//        for (int i=0; i< indexes.size(); i++) {
//            System.out.print(indexes.get(i) + "  ");
//        }
//
//
//        String text1 = "ACGTTGC";
//        char[] array = text1.toCharArray();
//        reverse(array);
//        complement(array);
//
//        String text2 = "ACTTCCGGAAAAACCTTTAAAATTCGCACAGTATATTTTCTTTCTTCTACTCTAAGTCAACACCAGATGCTGGCTGGGGATAAAGAGAGATACGGCATGCCCGTCCGCAGACGGCGCGGGTACCAGATCTTTGTTATTCAATCCTAGGCCAATGGAAAATCGAATTGTGGGGGGAATAGTAGTCTGGCCGATCCTTCTGTTCAATCGCACTCGATGAGATGTATTGGGCTATTCGTCGAAAGCCGGGCAACAGGACGTGGGTGTCAGATCTAGGATGGCAATGTTCTGTGGAGCACGATCCACCATGCTCGCGAAGCTGAGACATAACAAAGGTCTTTAGGGTGATCTGTCCGTTCACTTAACCAAGATCGTGGGAACACCCTGTTGCTCGTAATAGGGAGCATACCCTCATACAGCGCCTTGGCATATAACAAGGCTTCGTCACGATGGTTTGACCAGGCTCAAACGATGACCGGTCGGTAACCTTACCGACCCATCGCTAACTTCAACCGCATCAAACACGTTTCTGGGTTTCGCCGTATGTTTACTGGCCTCGTTAACCCACAGGCGTTGGTTCTGGGTTAGGGACTAGAGATTTCTCAACATTGAAGCTCACTCCAAAGCGGTCAGTACACACCTGAACGCGTAATTGTCAGCGATAGATGATTAGAAGTGTGTAGCACAGAGGCCCGTGAGGGTCAGAGGATTGCTAGGACTATCGACATAGGCCCTACTCGGTTATAAATCTTCGCGCTAAACCCTTAATGTTAGTGCTTCCGGTCCGCCTAGTCTGCCTGTAGCGCTCGCAACCGGACCGCCGGCGGTTAACTGTTCCGCGTTCTGAATCCTGGAATAGGAGGCACGTCTATCACTCGGGCCATAATTGACTAGCGGAGAGCAAGCACGCCGCCGTGTCGGTTTGCCCAATCTATGAAATCAGCTATCTAGGTGCATGCCAAAGCGTCGCCGCTTGGAAACCGACTCCCGTTGTAGCGTTGAATTCTGCATACCACGCGTCGAGTCCCGGACGGACGCATGGTGGGGAGCCCCACTCCATCCTGCGGCTCTGATTAGCCAAGTTTATCTCGCTATGAACGTCCAAAACCCAGGCCGGTCCTCCGCCTCTAAAAATTGACTGTCAGATTGCTTCTATAGATAATTGACTCTGTAGATAGGCGGGACTCAAAGGGATATCCACCTATTAGCACGCCCCGTTGAGTCCCTGATTGCAATTATTATAATGGAATAATACACGCGGTAGCACCATAGAATCCGGTGCGACACGTTACTGAAATCTGGGACCCTCAAGGGGTCGTCGCGGCGGACCTGGTCGGATTCCCGTAGAGCTCTGGGCCAAGCTGTCTAGCCTTTCTGAACGAGCACAGCGTAACCCAGTAATAAGGACGCGGTTCTACAGGAGTAGATGACAATCGATTTAATAGACAAGAAAGTTTTTTGAACACCGACAAACATATCTGGTGATTAACTACAGCGTTGTGAGCTTAATTTGCGCCAAAATGCGAAATGAGTAGCAGCCGCCCAATGGTGCGCGACACGCTGAGCCCGGAGTGACGGAGCCTCAGACCGCAATTAAGCGAGTGGGCGAGCTTCATGATGAGATACTCTGCCGACAGCTCTAACTCATCAACGTACGACTACTATAGCGCATACGATCTCACTCGGCGGATCGTGTTTCACTAAAGTTTCTTCCTCGACGCTACAAGAAACAAGTTCCGCGGCAGATCTTCGTGCACGAACCCACTGCGGCCAGGAAGCCATGGGGATGGTTGTATAAGCTAATTCCCACTGCGGGCAAAAGTGCCGTCTATTTCATCACAAGAACAGTTATGACGTCACCATGCTGGCGATATAAAGACTGTCCCCTGAGAGTCTGTGGCCCACATGGACGTACGAACATACCGGAGCGAGTCGCTAAAGTGACTTCACAGTCGGCCTGAGAGAACAGTTTTCTCCTCCTATCCAGAGATTGACCCATAGACCTGGCTAATGTTCCCACCCTTGTACGATCCTATGATCTGAGAGTCGTAAAGACCCGCCTGGTCAATCGAATACCAGACTGAGTATCACTATTAATAATGGGCCACCCAAGTCACGCGCGCCTCCAGGTATTTGTTTCTATACACGGGCGGCGTCCTAAACTATTCTTACACTAGGGACTGCGCGGTTTGTCGAAAGTATTCTCAATCGCCTTCTATGGTGAGCCTGCTTACGCTCCAACTGGAGTGTTCGGAGTCTGGGGACTCAAACGAATGCCCGACAAACGTTTACCAGAGGCGCCTGATCTGTTTGGTGGTTTTCCCAGGGTAGGACCTCAGTTCTGCCCGGTAAACACTTTGTGGCGACTATCGAATTTCCGGTGGCTAAGACGAACTTTATTCGCGTTAATCCCACGCAAAGAATTACGACTCCGCATTTGTATACACCACCCCTCATTAATGAGGGACTGTATGCCTAACTCGTAACGTTCGTCGACTTCACAGAACCGGCGCATAGATTCTCATTGTCCCAATCTACCGGAAAGGTCGCAGGCATAGTACGTCGGCTCCCAGAGCTAAATTTTTGTAGTCAGGTGTCGCACGATGCGAACTTCTCTTTTAATCCGATAAAACTTAGCCTCCCATCGGTTACGTGGCCCAAGCCTGGTTCCGCTACACGAAGAATGAAAGGACGAGAGGATTAAATTGGGGCATTGAGGTACGCTTATGGGGTGAGGCTCAGACCTCTATGGGTCGTCCTATGTTATGCGATCAATTTACCACAAAATAATCGCGTCCTTGGAAAGTGGGCAGGATCCTGTATGAACCGTCGTTAGCTGGTCCGCGGACCAATATTTCTCAAATGTGATTTCTGCTTACCGGCATGAGCACGGTGGAAATTCCAGGACGAGTTTCGAAAGCTTCAACCGCAAGTATGATCTGAGGGCGATAAAAAAAATCGCCTCTCTATAACATACTCCGCTCTTAGGTAACGAGCAAGGTGCGGCTGTGTAGCATTCAGTTGCCTGGCCTTGCCCTTAGCCTTCTTAATTTCCGTGTTGCTAGGTTGAAGTACGTTCTCCTTTTTTGGGCTTTCACTCCTGCCAATATATTAGTGCAGGAAACTGGCTCGGTGTGGTCTTAGGGGTTGTACGACCCGCAGTCATAAGAAGCATGTCCTCACTCCGCCTAAGACCAACACTGGCGCCTAGCGAACGTGTCACCAAAAATTTTACCTAGAGCCCACATATCCCGGGATACAAGGTAGTCTACAGGGGAGCCAAACCACGATCGCTTGCTTTAACCTGAACGAATGTGTTCTTAAAGCCCGATAATTCCTACTTGAATAGTTTGTTCGTAATGATAGTGTTTCTCCTAAGATCGTGAAGGCTAACGTGAATTTATTCTGGAGCCCCCCAACGGAGCTAAACTGACGGATAACTCCGGTTTTCGGAGCCCTGGTCCCCAACGTAAGGTGGCCCCACATGACGTCAGTAAGAGCGCCCGTCGTTACCGCGAGGACTTCATCCATGGGATATTCCACTGCGCCTAATCAAATTCCAGTCAACAGTAACGAGACACAGACGAAGTGTGTGTACGGGTATCCGGGGTCCCCGAGGAGCCTCAAAGGTAAAGACATGGCGCCACACATCGGTGACTAGACGCACTCAACATCGCATACTAGTGTCCATTCGAATGTATGTGGCTGAATCTAGCATTTCGCTACCAACATTGGCAAAGTGGATAGCCGTTTTTTTACGACGCGGTTGGGACAACGGGCCAGTATAAATAACATGGCGCATGCTCGAAGAGTAGAGGGACCCGGTTCACCGCTGTCACGATCGCCGGAGACGGACACTACACCGCCATGGGCGTTCTAAACCCGGTTAACCGCTACCTCGTGCTTTTTCCCAATACTCATATGGATTGCCATGAAGCCCAATCAAGGCCGAATGATTGTTCATCTTAGAACGGTACAGTGTAGATTTCTCGGACCCCGGCCAGCGGATATCGCTTTCCGCGCACGCACCCATATAGCTGAGTGCGGTTCTTTCCATCATTTTTTTCACTTAACTCCCGCAAAGAACGGTCGGTCGACCTCTAGTTTAGTGGACGCAGGGGGGAACCATGTTCGAATTACAGATCGCGGAGCAATATGATGTATTAGACAACCTCTAGTGAACGATCGTCAGGTGGGACCATCGAGAAGTGTTGGGTATGGGCAGCAATCCACCTAAGTAAATATAGATCCCTCAGTGACCTGTGGTATGGTACCCGAGCATTGGCTCGTTTGCCCCACTCTAGACTCTCTTGGGTTTCCGAGGAGACCATTTAGGCTTTGTTTAATGAGTGAACAGGGTCATGATACAACCCATATGTAGTTTTACGCTTTTGGTTGGGGCATAATCATCCGTCCTGTTGGCCCAAGGTTTGACGTCAGTATTCTTCGATACCGACTGTCCGTAAACATACCCAGAAGAGGCACATTCGGAGCTTGAGGCGGAAGAATACTTTGGTCCCTGGGGTGCCGGTTTTCCCCGGCTCGGATAACTCCTGTCGAAGTTATTACGCAATTAAGGCAAACTCCTATGGACTATGTACTGATACTGTTCGTATAGCTTAGACACGTCTCTCCTTGGGGTAAGAGGACGTATGAAGCTGCCCATGCCTTCTGTTCCCGGCCCTCAGCCGCTGGTTAACGATGGCGGCGTTCCCCCGTAAGTCTCGAGGTTTTGAGTGCCTCAATGTCAGTCGACAAGCGTCAGGTACAAAGTCCGGGCTTGTTGGGGTATTGACTGAACGGGGGCGGCACCCTGTAGGTAGACGGGTCATAGAGCCTACCATCCTAGCCAAAACGGGCGCTCCATTGGAGAGGTACCATCAGATTCGGATGCAAAAAAGCAGCTCATAGGAAGGCCTTCCCTATATTTGTGAACGATTACCGCGGTATTTGTGTTAGCTACTCTGGATGATTAACCCGACGCTCCTTTATCAGTTGTGATCTGTTGTCATTGCACCGCGACTTCAAGGAACCCAGATGCACCGCACATAGTTGGTAATCCGGGCTGACGAGTGGGGCTGGTACTTGTGCCAGTCTACAATCAGCCCGTCGGAGGGAGGGTGGAGTCCAACACAATCACTTTGTATAAGCGGAATGCTAAAAGCTGGGCGACTTGGGTAGTAGTCATGGATGCGGGATCCGTCTGAACGGCACGGGTTGCAGTAGTGCTATTCTCCCCGATGTTGATTATATATAGCTTCGGTCATAATTGTCTTTCAAGAGCATAATGAAATACCCTATCAGCGTAGTTAGTCATGGAGCGGTCAAGGGTCCCTGGGCCAAATTCTGTAACCAACCATCTAGCTATCTTCCGGGGCTCTCCCTTTACCGACCTGACTCCACGTGGCGCCCTGTTCTGTGCTATACGCCAGGTCCGATGAACACATAAAAGTGAACACAAGCGTCGAGCTTTCCGAAGGCATGTCCCGTCTAAGCGACTTCGGGCTGAGGAGATGTAAACCCTTACGGACACGCACCCGCACAGACTAACCGTAAATCCACGGGTCATGCTATATCTTGCAATTGAATATCGACCTCGCTATCGCTGACAGGATCACTACCCCGCTCTCACCTAGTATCTCAGGAGGACGCCGTCTCCCAACCCGTCAGCGTCGGAAGAGCGTTCTACCGGATTCTAGATTATACAAAGCCCAACATGAACTCTTGGGCAGTGGAGATTAAGTTAAGCTTAATACGCTTTCTAATGGAGCCATGTGATTCGCTACTCGGCTACACTAACTCAGGGTACGTTCATGCACTTGCATCAAGTCGGGAGGCGGTTTAGATCTTGTTTCGTATTACGGCATTAGCACTACACAATCCGCCTCACTCGCCGGGCATCTCAACGTTTATCAAAACAGGCCTGAGCCTCATGTTGCGATCTTCATTGCCCTCTGTAGGTGTTTGGGGCCGAGGACCCAGGGGAGAAGTCCGATCGTGGACAACGCAGGTATAAAGTTCTTAACTCCCTGCCAACTTCTAGTGTATCGCATACCCACGGCCGCCTGTACTTGACAAAATCGGTATTCTCGAGACTTGTCACATAGAAGGTTCTACTCGTGTTGTATCCTTGAGGATACTTTTAGAACGGACCTATCTATTATGCCTTCTACTTACTAAGACCCACAATCGTAATATCTTTCCCTCAGCGGAGGTTACGATGCCATGTCGCGGCATGGATAGTTGGTGTTATCGCATCCCCGGCCAGACGCCCTTCTATCAGATGGACCAGCATTAGATGCCACTCCAAACTGACTGTTACTTAGGATCCAGTGACGTAAAGTGTGGATTCTACTGAGTTGCGCTTTTTGTTCAGTAGGTAGGGTCGGACAGTGTATGTAAGATTTAAAGTGGGCCGTAGAGTCTCTACGAAGTCTGAAGCTCTATGTGCCGCGTCTGGCCGACGTTCCGCTCCCTCGAACTTTGCTGCAGGTAATAAATAAATTCCTCATTCCGTTAGCTCTATCACCCCGTCAGTACGAGAGTCGCGCACTGGCAAGTAAGTGAATGGCTCGTAGACAATGCGAGAGGGATGTATTTTCTACCCTGGAAAAAAGTAGAGTATTCTCCGCTGCATGATCTACGCTACCCACTCCTATTTGGAGGATTTTCCGTGGCTAACCTACGCGGGTGGTTGAGCGGGACCGGTCAGGACCGGTACCCTACCTCAAAGATTGGGCACAGCTACTTGACGTTATGCAATAGAATGGTGCGTTAGTAACGGTGGAGTGGCTCGAGATCCTAACGGACGCTTGTCCTGTTTGCCGACAAAAAACACGCGTAGCGCCAGGGCCATACAATCTCCCGGATACTCAGAAGTAGGGACCGTGCCGAGTAATCGAAATTAGTCGGCTACACCCCCTTTAGTAGCGGAGTTAGGTATCTCAAAGTTCGCTCTGCACAGCAGACATATTTCTTTTCGACTCAAGGCTGGGAACGGAAATCATAGGCCCCAATGTCGGTATCTTCCAAATTAAGCTGATGGAAGCAAGAGGCCGTTTCTTGGGGGGATGGTGCTGGTAGGATGCCTCCTGGGCCACCGTGCCGAAACTAACCAATCGTACTGGTAATATATGTGCGATCGGCTAAAGTGGGATTGCATCCACCGGTATGTTATAGAGTAACAAAGGGCATCGGGTAGTAGTGGCTGACAAATCGCTTACTATCGCACAAGTCTAGACCAGGTGGATATTAGGTGGTTCACTACGTATCATGTACATGTTGGTAAGTGGTCCGAACGTACGATTCTGCTCCCATTCTGAATCATTTGAGGACTACTGAGGGTAACGGGATAAGATAAGCTACTTAACTCCAATGATATTAAGTGTTGTCCCATATAAGGAGGTTGACAAGGGCAACAAGCGGCCCCGGGGTATGTCAATGGCATACTGGCTTTAGCCCATCACCTGGGATCGCACCGGCCCATACATGGGCAGAACTCGGACACTCCCGCAATAGCCGTCTAAGCGAGTTATTCGAACTTTGCTCAGACGCTCGCGCTGCCTAATAACCCTGAAAACCTGATAAACGCCCGTGCTTGGGGTATCGATTGCCAACCACCCTATGTTCAGTTATGTCCGCGTTACTTCGTAAGGCAACTCATGCCCGAGGGTCACAACACACGAACTCAGTGCACGGGGTTGGTTACCCAGCGGCGGACCCCGCATAAGTCTAAAGGTATGCTAAAGTCATTACAAAGATTATCTTCTAAGGTCAAACGAAGCGAAAAAGCGTTCCACAGGAAGGCTTCCGTAAGTATACCGCGACAGATGGGACTAGCGACGAAATAATTGGATTGTTAGTTAGTAGTCGTCGATCCGGTAAATCCCGCCTGTATGACTGGGCAAACGGAACTTAAAGACTTACGGCAGGCACATGGTATTGAGCCCCTTAAAACTCCGTTTCCCATTGAACACTGCGTTCCGACCGCGCATTATACAGCGGACACCCAGGTCACTGCATTATGTCGCCTTGAAGTTTGCGTCCATGTGGGGGCAACGTTGTTTCAGTCCTCTGAAACTCCCCTTTACATTCAAAAACAATTCCATTATATTATAAGTATGGCTCGGGACTCGGGCGGGTTGGGTATAGGCTGCGGTTCCCCGTGCCGTAAGTTTCGATCATAACATTGCAGCGACGAACATTTAACCGCGGGCTGTATGGAAAGACGTGAGGAGCGGGATAGTATCAGATACCGGCTCCACTATGAGTAGTGTCAATATCTAATTCACGGCGACGAGGAAGGGGTCGGTTTCACCCGCGTTGTACGCGACACTCCGCCTGGGATTATGACGGGTAAGGCCCATACGATACGTAACGTTGCATCCAGGGCTCCGCTGGCCAACGACCTGGTCCTGGTAGCGCAGAGCATATAATTCTCTAACGTTG";
//        char[] text2Array = text2.toCharArray();
//        reverse(text2Array);
//        complement(text2Array);
//        System.out.println(text2Array);
//
//        char[] text3Array = "ACGTTGCATGTCGCATGATGCATGAGAGCT".toCharArray();
//
//        Map<String, Kmer> map3 = getKmers_N(text3Array, 4);
//        List sorted3 = sort(map3);
//        List<Kmer> mostFrequent3 = getMostFrequent(sorted3);
//
//        Map<String, Kmer> map4 = getKmers_N(text3Array, 0, text3Array.length, 4);
//        List sorted4 = sort(map4);
//        List<Kmer> mostFrequent4 = getMostFrequent(sorted4);
//
//        String text = "ACTTCCGGAAAAACCTTTAAAATTCGCACAGTATATTTTCTTTCTTCTACTCTAAGTCAACACCAGATGCTGGCTGGGGATAAAGAGAGATACGGCATGCCCGTCCGCAGACGGCGCGGGTACCAGATCTTTGTTATTCAATCCTAGGCCAATGGAAAATCGAATTGTGGGGGGAATAGTAGTCTGGCCGATCCTTCTGTTCAATCGCACTCGATGAGATGTATTGGGCTATTCGTCGAAAGCCGGGCAACAGGACGTGGGTGTCAGATCTAGGATGGCAATGTTCTGTGGAGCACGATCCACCATGCTCGCGAAGCTGAGACATAACAAAGGTCTTTAGGGTGATCTGTCCGTTCACTTAACCAAGATCGTGGGAACACCCTGTTGCTCGTAATAGGGAGCATACCCTCATACAGCGCCTTGGCATATAACAAGGCTTCGTCACGATGGTTTGACCAGGCTCAAACGATGACCGGTCGGTAACCTTACCGACCCATCGCTAACTTCAACCGCATCAAACACGTTTCTGGGTTTCGCCGTATGTTTACTGGCCTCGTTAACCCACAGGCGTTGGTTCTGGGTTAGGGACTAGAGATTTCTCAACATTGAAGCTCACTCCAAAGCGGTCAGTACACACCTGAACGCGTAATTGTCAGCGATAGATGATTAGAAGTGTGTAGCACAGAGGCCCGTGAGGGTCAGAGGATTGCTAGGACTATCGACATAGGCCCTACTCGGTTATAAATCTTCGCGCTAAACCCTTAATGTTAGTGCTTCCGGTCCGCCTAGTCTGCCTGTAGCGCTCGCAACCGGACCGCCGGCGGTTAACTGTTCCGCGTTCTGAATCCTGGAATAGGAGGCACGTCTATCACTCGGGCCATAATTGACTAGCGGAGAGCAAGCACGCCGCCGTGTCGGTTTGCCCAATCTATGAAATCAGCTATCTAGGTGCATGCCAAAGCGTCGCCGCTTGGAAACCGACTCCCGTTGTAGCGTTGAATTCTGCATACCACGCGTCGAGTCCCGGACGGACGCATGGTGGGGAGCCCCACTCCATCCTGCGGCTCTGATTAGCCAAGTTTATCTCGCTATGAACGTCCAAAACCCAGGCCGGTCCTCCGCCTCTAAAAATTGACTGTCAGATTGCTTCTATAGATAATTGACTCTGTAGATAGGCGGGACTCAAAGGGATATCCACCTATTAGCACGCCCCGTTGAGTCCCTGATTGCAATTATTATAATGGAATAATACACGCGGTAGCACCATAGAATCCGGTGCGACACGTTACTGAAATCTGGGACCCTCAAGGGGTCGTCGCGGCGGACCTGGTCGGATTCCCGTAGAGCTCTGGGCCAAGCTGTCTAGCCTTTCTGAACGAGCACAGCGTAACCCAGTAATAAGGACGCGGTTCTACAGGAGTAGATGACAATCGATTTAATAGACAAGAAAGTTTTTTGAACACCGACAAACATATCTGGTGATTAACTACAGCGTTGTGAGCTTAATTTGCGCCAAAATGCGAAATGAGTAGCAGCCGCCCAATGGTGCGCGACACGCTGAGCCCGGAGTGACGGAGCCTCAGACCGCAATTAAGCGAGTGGGCGAGCTTCATGATGAGATACTCTGCCGACAGCTCTAACTCATCAACGTACGACTACTATAGCGCATACGATCTCACTCGGCGGATCGTGTTTCACTAAAGTTTCTTCCTCGACGCTACAAGAAACAAGTTCCGCGGCAGATCTTCGTGCACGAACCCACTGCGGCCAGGAAGCCATGGGGATGGTTGTATAAGCTAATTCCCACTGCGGGCAAAAGTGCCGTCTATTTCATCACAAGAACAGTTATGACGTCACCATGCTGGCGATATAAAGACTGTCCCCTGAGAGTCTGTGGCCCACATGGACGTACGAACATACCGGAGCGAGTCGCTAAAGTGACTTCACAGTCGGCCTGAGAGAACAGTTTTCTCCTCCTATCCAGAGATTGACCCATAGACCTGGCTAATGTTCCCACCCTTGTACGATCCTATGATCTGAGAGTCGTAAAGACCCGCCTGGTCAATCGAATACCAGACTGAGTATCACTATTAATAATGGGCCACCCAAGTCACGCGCGCCTCCAGGTATTTGTTTCTATACACGGGCGGCGTCCTAAACTATTCTTACACTAGGGACTGCGCGGTTTGTCGAAAGTATTCTCAATCGCCTTCTATGGTGAGCCTGCTTACGCTCCAACTGGAGTGTTCGGAGTCTGGGGACTCAAACGAATGCCCGACAAACGTTTACCAGAGGCGCCTGATCTGTTTGGTGGTTTTCCCAGGGTAGGACCTCAGTTCTGCCCGGTAAACACTTTGTGGCGACTATCGAATTTCCGGTGGCTAAGACGAACTTTATTCGCGTTAATCCCACGCAAAGAATTACGACTCCGCATTTGTATACACCACCCCTCATTAATGAGGGACTGTATGCCTAACTCGTAACGTTCGTCGACTTCACAGAACCGGCGCATAGATTCTCATTGTCCCAATCTACCGGAAAGGTCGCAGGCATAGTACGTCGGCTCCCAGAGCTAAATTTTTGTAGTCAGGTGTCGCACGATGCGAACTTCTCTTTTAATCCGATAAAACTTAGCCTCCCATCGGTTACGTGGCCCAAGCCTGGTTCCGCTACACGAAGAATGAAAGGACGAGAGGATTAAATTGGGGCATTGAGGTACGCTTATGGGGTGAGGCTCAGACCTCTATGGGTCGTCCTATGTTATGCGATCAATTTACCACAAAATAATCGCGTCCTTGGAAAGTGGGCAGGATCCTGTATGAACCGTCGTTAGCTGGTCCGCGGACCAATATTTCTCAAATGTGATTTCTGCTTACCGGCATGAGCACGGTGGAAATTCCAGGACGAGTTTCGAAAGCTTCAACCGCAAGTATGATCTGAGGGCGATAAAAAAAATCGCCTCTCTATAACATACTCCGCTCTTAGGTAACGAGCAAGGTGCGGCTGTGTAGCATTCAGTTGCCTGGCCTTGCCCTTAGCCTTCTTAATTTCCGTGTTGCTAGGTTGAAGTACGTTCTCCTTTTTTGGGCTTTCACTCCTGCCAATATATTAGTGCAGGAAACTGGCTCGGTGTGGTCTTAGGGGTTGTACGACCCGCAGTCATAAGAAGCATGTCCTCACTCCGCCTAAGACCAACACTGGCGCCTAGCGAACGTGTCACCAAAAATTTTACCTAGAGCCCACATATCCCGGGATACAAGGTAGTCTACAGGGGAGCCAAACCACGATCGCTTGCTTTAACCTGAACGAATGTGTTCTTAAAGCCCGATAATTCCTACTTGAATAGTTTGTTCGTAATGATAGTGTTTCTCCTAAGATCGTGAAGGCTAACGTGAATTTATTCTGGAGCCCCCCAACGGAGCTAAACTGACGGATAACTCCGGTTTTCGGAGCCCTGGTCCCCAACGTAAGGTGGCCCCACATGACGTCAGTAAGAGCGCCCGTCGTTACCGCGAGGACTTCATCCATGGGATATTCCACTGCGCCTAATCAAATTCCAGTCAACAGTAACGAGACACAGACGAAGTGTGTGTACGGGTATCCGGGGTCCCCGAGGAGCCTCAAAGGTAAAGACATGGCGCCACACATCGGTGACTAGACGCACTCAACATCGCATACTAGTGTCCATTCGAATGTATGTGGCTGAATCTAGCATTTCGCTACCAACATTGGCAAAGTGGATAGCCGTTTTTTTACGACGCGGTTGGGACAACGGGCCAGTATAAATAACATGGCGCATGCTCGAAGAGTAGAGGGACCCGGTTCACCGCTGTCACGATCGCCGGAGACGGACACTACACCGCCATGGGCGTTCTAAACCCGGTTAACCGCTACCTCGTGCTTTTTCCCAATACTCATATGGATTGCCATGAAGCCCAATCAAGGCCGAATGATTGTTCATCTTAGAACGGTACAGTGTAGATTTCTCGGACCCCGGCCAGCGGATATCGCTTTCCGCGCACGCACCCATATAGCTGAGTGCGGTTCTTTCCATCATTTTTTTCACTTAACTCCCGCAAAGAACGGTCGGTCGACCTCTAGTTTAGTGGACGCAGGGGGGAACCATGTTCGAATTACAGATCGCGGAGCAATATGATGTATTAGACAACCTCTAGTGAACGATCGTCAGGTGGGACCATCGAGAAGTGTTGGGTATGGGCAGCAATCCACCTAAGTAAATATAGATCCCTCAGTGACCTGTGGTATGGTACCCGAGCATTGGCTCGTTTGCCCCACTCTAGACTCTCTTGGGTTTCCGAGGAGACCATTTAGGCTTTGTTTAATGAGTGAACAGGGTCATGATACAACCCATATGTAGTTTTACGCTTTTGGTTGGGGCATAATCATCCGTCCTGTTGGCCCAAGGTTTGACGTCAGTATTCTTCGATACCGACTGTCCGTAAACATACCCAGAAGAGGCACATTCGGAGCTTGAGGCGGAAGAATACTTTGGTCCCTGGGGTGCCGGTTTTCCCCGGCTCGGATAACTCCTGTCGAAGTTATTACGCAATTAAGGCAAACTCCTATGGACTATGTACTGATACTGTTCGTATAGCTTAGACACGTCTCTCCTTGGGGTAAGAGGACGTATGAAGCTGCCCATGCCTTCTGTTCCCGGCCCTCAGCCGCTGGTTAACGATGGCGGCGTTCCCCCGTAAGTCTCGAGGTTTTGAGTGCCTCAATGTCAGTCGACAAGCGTCAGGTACAAAGTCCGGGCTTGTTGGGGTATTGACTGAACGGGGGCGGCACCCTGTAGGTAGACGGGTCATAGAGCCTACCATCCTAGCCAAAACGGGCGCTCCATTGGAGAGGTACCATCAGATTCGGATGCAAAAAAGCAGCTCATAGGAAGGCCTTCCCTATATTTGTGAACGATTACCGCGGTATTTGTGTTAGCTACTCTGGATGATTAACCCGACGCTCCTTTATCAGTTGTGATCTGTTGTCATTGCACCGCGACTTCAAGGAACCCAGATGCACCGCACATAGTTGGTAATCCGGGCTGACGAGTGGGGCTGGTACTTGTGCCAGTCTACAATCAGCCCGTCGGAGGGAGGGTGGAGTCCAACACAATCACTTTGTATAAGCGGAATGCTAAAAGCTGGGCGACTTGGGTAGTAGTCATGGATGCGGGATCCGTCTGAACGGCACGGGTTGCAGTAGTGCTATTCTCCCCGATGTTGATTATATATAGCTTCGGTCATAATTGTCTTTCAAGAGCATAATGAAATACCCTATCAGCGTAGTTAGTCATGGAGCGGTCAAGGGTCCCTGGGCCAAATTCTGTAACCAACCATCTAGCTATCTTCCGGGGCTCTCCCTTTACCGACCTGACTCCACGTGGCGCCCTGTTCTGTGCTATACGCCAGGTCCGATGAACACATAAAAGTGAACACAAGCGTCGAGCTTTCCGAAGGCATGTCCCGTCTAAGCGACTTCGGGCTGAGGAGATGTAAACCCTTACGGACACGCACCCGCACAGACTAACCGTAAATCCACGGGTCATGCTATATCTTGCAATTGAATATCGACCTCGCTATCGCTGACAGGATCACTACCCCGCTCTCACCTAGTATCTCAGGAGGACGCCGTCTCCCAACCCGTCAGCGTCGGAAGAGCGTTCTACCGGATTCTAGATTATACAAAGCCCAACATGAACTCTTGGGCAGTGGAGATTAAGTTAAGCTTAATACGCTTTCTAATGGAGCCATGTGATTCGCTACTCGGCTACACTAACTCAGGGTACGTTCATGCACTTGCATCAAGTCGGGAGGCGGTTTAGATCTTGTTTCGTATTACGGCATTAGCACTACACAATCCGCCTCACTCGCCGGGCATCTCAACGTTTATCAAAACAGGCCTGAGCCTCATGTTGCGATCTTCATTGCCCTCTGTAGGTGTTTGGGGCCGAGGACCCAGGGGAGAAGTCCGATCGTGGACAACGCAGGTATAAAGTTCTTAACTCCCTGCCAACTTCTAGTGTATCGCATACCCACGGCCGCCTGTACTTGACAAAATCGGTATTCTCGAGACTTGTCACATAGAAGGTTCTACTCGTGTTGTATCCTTGAGGATACTTTTAGAACGGACCTATCTATTATGCCTTCTACTTACTAAGACCCACAATCGTAATATCTTTCCCTCAGCGGAGGTTACGATGCCATGTCGCGGCATGGATAGTTGGTGTTATCGCATCCCCGGCCAGACGCCCTTCTATCAGATGGACCAGCATTAGATGCCACTCCAAACTGACTGTTACTTAGGATCCAGTGACGTAAAGTGTGGATTCTACTGAGTTGCGCTTTTTGTTCAGTAGGTAGGGTCGGACAGTGTATGTAAGATTTAAAGTGGGCCGTAGAGTCTCTACGAAGTCTGAAGCTCTATGTGCCGCGTCTGGCCGACGTTCCGCTCCCTCGAACTTTGCTGCAGGTAATAAATAAATTCCTCATTCCGTTAGCTCTATCACCCCGTCAGTACGAGAGTCGCGCACTGGCAAGTAAGTGAATGGCTCGTAGACAATGCGAGAGGGATGTATTTTCTACCCTGGAAAAAAGTAGAGTATTCTCCGCTGCATGATCTACGCTACCCACTCCTATTTGGAGGATTTTCCGTGGCTAACCTACGCGGGTGGTTGAGCGGGACCGGTCAGGACCGGTACCCTACCTCAAAGATTGGGCACAGCTACTTGACGTTATGCAATAGAATGGTGCGTTAGTAACGGTGGAGTGGCTCGAGATCCTAACGGACGCTTGTCCTGTTTGCCGACAAAAAACACGCGTAGCGCCAGGGCCATACAATCTCCCGGATACTCAGAAGTAGGGACCGTGCCGAGTAATCGAAATTAGTCGGCTACACCCCCTTTAGTAGCGGAGTTAGGTATCTCAAAGTTCGCTCTGCACAGCAGACATATTTCTTTTCGACTCAAGGCTGGGAACGGAAATCATAGGCCCCAATGTCGGTATCTTCCAAATTAAGCTGATGGAAGCAAGAGGCCGTTTCTTGGGGGGATGGTGCTGGTAGGATGCCTCCTGGGCCACCGTGCCGAAACTAACCAATCGTACTGGTAATATATGTGCGATCGGCTAAAGTGGGATTGCATCCACCGGTATGTTATAGAGTAACAAAGGGCATCGGGTAGTAGTGGCTGACAAATCGCTTACTATCGCACAAGTCTAGACCAGGTGGATATTAGGTGGTTCACTACGTATCATGTACATGTTGGTAAGTGGTCCGAACGTACGATTCTGCTCCCATTCTGAATCATTTGAGGACTACTGAGGGTAACGGGATAAGATAAGCTACTTAACTCCAATGATATTAAGTGTTGTCCCATATAAGGAGGTTGACAAGGGCAACAAGCGGCCCCGGGGTATGTCAATGGCATACTGGCTTTAGCCCATCACCTGGGATCGCACCGGCCCATACATGGGCAGAACTCGGACACTCCCGCAATAGCCGTCTAAGCGAGTTATTCGAACTTTGCTCAGACGCTCGCGCTGCCTAATAACCCTGAAAACCTGATAAACGCCCGTGCTTGGGGTATCGATTGCCAACCACCCTATGTTCAGTTATGTCCGCGTTACTTCGTAAGGCAACTCATGCCCGAGGGTCACAACACACGAACTCAGTGCACGGGGTTGGTTACCCAGCGGCGGACCCCGCATAAGTCTAAAGGTATGCTAAAGTCATTACAAAGATTATCTTCTAAGGTCAAACGAAGCGAAAAAGCGTTCCACAGGAAGGCTTCCGTAAGTATACCGCGACAGATGGGACTAGCGACGAAATAATTGGATTGTTAGTTAGTAGTCGTCGATCCGGTAAATCCCGCCTGTATGACTGGGCAAACGGAACTTAAAGACTTACGGCAGGCACATGGTATTGAGCCCCTTAAAACTCCGTTTCCCATTGAACACTGCGTTCCGACCGCGCATTATACAGCGGACACCCAGGTCACTGCATTATGTCGCCTTGAAGTTTGCGTCCATGTGGGGGCAACGTTGTTTCAGTCCTCTGAAACTCCCCTTTACATTCAAAAACAATTCCATTATATTATAAGTATGGCTCGGGACTCGGGCGGGTTGGGTATAGGCTGCGGTTCCCCGTGCCGTAAGTTTCGATCATAACATTGCAGCGACGAACATTTAACCGCGGGCTGTATGGAAAGACGTGAGGAGCGGGATAGTATCAGATACCGGCTCCACTATGAGTAGTGTCAATATCTAATTCACGGCGACGAGGAAGGGGTCGGTTTCACCCGCGTTGTACGCGACACTCCGCCTGGGATTATGACGGGTAAGGCCCATACGATACGTAACGTTGCATCCAGGGCTCCGCTGGCCAACGACCTGGTCCTGGTAGCGCAGAGCATATAATTCTCTAACGTTG";
//        map4 = getKmers_N(text.toCharArray(), 14);
//        sorted4 = sort(map4);
//        mostFrequent4 = getMostFrequent(sorted4);
//        printKmers(mostFrequent4);

        String text = "CGCCTAAATAGCCTCGCGGAGCCTTATGTCATACTCGTCCT";
        Map<String, Kmer> map3 = getKmers_N(text.toCharArray(), 3);
        List sorted4 = sort(map3);
        List mostFrequent4 = getMostFrequent(sorted4);
//
//
//        Map<String, Kmer> map3_2 = getKmers_N(text.toCharArray(), 0, text.toCharArray().length, 10);
//        List sorted3_2 = sort(map3_2);
//        List mostFrequent3_2 = getMostFrequent(sorted3_2);
//
//        //Set<Kmer> kemrs = stupidClumpMethod(text.toCharArray(), 10, text.toCharArray().length, 4);
//        Set<String> kmers = stupidClumpMethod(text.toCharArray(), 10, 24, 4);
//        for (String string: kmers) {
//            System.out.print(string + "  ");
//        }

        char[] charArray = getChars("/Users/msalman/Downloads/E_coli.txt");
        //Map<String, Kmer> map = getKmers_N(charArray, 9);
        long start = System.currentTimeMillis();
        Map<String, List<List<Integer>>> map = KmersByTheClumps(charArray, 9, 500, 3 );
        long end = System.currentTimeMillis();
        System.out.println("time (ms): " + (end - start) + "  total: " + map.keySet().size());
        map.keySet().stream().forEach(key -> System.out.print(key + "  "));

        System.out.println("Reverse Complements");

        List<Set<String>> reverseComplements = findReverseComplements(map.keySet());
        for (Set<String> set: reverseComplements) {
            for (String kmer : set) {
                System.out.println(kmer);
            }
            System.out.println();
        }
        int i=0;
    }



}
